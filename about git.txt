Tutorials

 https://try.github.io/levels/1/challenges/1

1.git init - it initiazes a git directory

2.git status -git status command to see what the current state of our project is
   2.1 Adding & Committing
       I created a file called octocat.txt in the octobox repository for you
       You should run the git status command again to see how the repository status has changed

3.git add octocat - Git to start tracking changes made to octocat.txt. 
                    we first need to add it to the staging area by using git add.
                    Nice job, you've added octocat.txt to the Staging Area


4.git status - On branch master
               Initial commit

               Changes to be committed:
               (use "git rm --cached <file>..." to unstage)
               new file:   octocat.txt

5.git commit -m "Add cute octocat story" - Git says changes to be committed? The files listed here are in the Staging Area, 
                                           and they are not in our repository yet. 
                                           We could add or remove files from the stage before
                                           we store them in the repository.

6.git add'*.txt' - You also can use wildcards if you want to add many files of the same type.
                   Notice that I've added a bunch of .txt files into your directory below.
                   I put some in a directory named "octofamily"and some others ended up in the root of our"octobox"directory. 
                   we can add all the new files using a wildcard with git add. Don't forget the quotes!

7.git commit -m'Add all the octocat txt files' - Okay, you've added all the text files to the staging area.
                                                 Feel free to run git status to see what you're about to commit.

8.git log - Git's log as a journal that remembers all the changes we've committed so far in the order we committed them.

9.git remote add origin https://github.com/try-git/try_git.git - This command takes a remote name and a repository URL,  
                                                             which in your case is https://github.com/try-git/try_git.git

10.git push -u origin master - The push command tells Git where to put our commits when we're ready, and now we're ready. So let's push our local changes to our origin repo (on GitHub).
                               The name of our remote is origin and the default local branch name is master.
                               The -u tells Git to remember the parameters, so that next time we can simply run git push
                               Git will know what to do. Go ahead and push it!


11.git pull origin master - Let's pretend some time has passed. We've invited other people to our 
                            GitHub project who have pulled your changes, made their own commits, and pushed them.
                            We can check for changes on our GitHub repository and pull down any new changes by running

12.git diff HEAD - Uh oh, looks like there have been some additions and changes to the octocat family. 
                   Let's take a look at what is different from our last commit by using the git diff command.
                   In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer.

13.git add octofamily/octodog.txt - Another great use for diff is looking at changes within files that have already been staged. 
                                   Remember, staged files are files we have told git that are ready to be committed.
                                   Tale of Two Octocats and an Octodog

14.git diff--staged - Good, now go ahead and run git diff with the --staged option to see the changes you just staged. 
                       You should see that octodog.txt was created.

15.git reset octofamily/octodog.txt - So now that octodog is part of the family, octocat is all depressed. 
                                      Since we love octocat more than octodog, we'll turn his frown around by removing octodog.txt.
                                      You can unstage files by using the git reset command

16.git checkout -- octocat.txt - git reset did a great job of unstaging octodog.txt, 
                                 but you'll notice that he's still there. He's just not staged anymore.
                                 It would be great if we could go back to how things were 
                                 before octodog came around and ruined the party.
                                 Files can be changed back to how they were at the last commit by using 
                                 the command: git checkout -- <target>.
                                 Go ahead and get rid of all the changes since the last commit for octocat.txt

17.git branch clean_up - When developers are working on a feature or bug they'll often create a copy (aka. branch) 
                         of their code they can make separate commits to. Then when they're done they can merge this
                         branch back into their main master branch.
                         We want to remove all these pesky octocats, so let's create a branch called clean_up

18.git checkout clean_up - Great! Now if you type git branch you'll see two local branches:
                           a main branch named master and your new branch named clean_up.
                           You can switch branches using the git checkout <branch> command

19.git rm '*.txt' - Ok, so you're in the clean_up branch.
                   You can finally remove all those pesky octocats by using the git rm command which 
                   will not only remove the actual files from disk, but will also stage the removal of the files for us.
                   rm 'blue_octocat.txt'
                   rm 'octocat.txt'
                   rm 'octofamily/baby_octocat.txt'
                   rm 'octofamily/momma_octocat.txt'
                   rm 'red_octocat.txt'

20.git commit -m "Remove all the cats" - Now that you've removed all the cats you'll need to commit your changes.
                                         clean_up 63540fe] Remove all the cats
                                         5 files changed, 5 deletions(-)
                                         delete mode 100644 blue_octocat.txt
                                         delete mode 100644 octocat.txt
                                         delete mode 100644 octofamily/baby_octocat.txt
                                         delete mode 100644 octofamily/momma_octocat.txt
                                         delete mode 100644 red_octocat.txt

21.git checkout master - Great, you're almost finished with the cat... er the bug fix, 
                         you just need to switch back to the master branch so you can copy (or merge) 
                         your changes from the clean_up branch back into the master branch.



21.git merge clean_up - Alrighty, the moment has come when you have to merge 
                        your changes from the clean_up branch into the master branch.
                        Take a deep breath, it's not that scary.

22.git branch -d clean_up - Congratulations! You just accomplished your first successful bugfix and merge. 
                            All that's left to do is clean up after yourself. 
                            Since you're done with the clean_up branch you don't need it anymore.

23.git push - Here we are, at the last step. I'm proud that you've made it this far, 
              and it's been great learning Git with you. 
              All that's left for you to do now is to push everything you've been working on to your remote repository,
              and you're done!



